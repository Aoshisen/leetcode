function maxValue(arr, k) {
	// Sort events by end time
	//按照结束时间排序
	arr.sort((a, b) => a[1] - b[1]);
	const n = arr.length;

	//dp[i][j] 从前 i(和原始数组关联) 个事件中选择 j (和事件总数关联) 个不重叠事件的最大价值
	const dp = Array.from({ length: n + 1 }, () => Array(k + 1).fill(0));

	for (let i = 1; i <= n; i++) {
		// 注意这里的 arr是经过 结束时间 排序的
		// 当前事件是 arr[i - 1]（因为数组从 0 开始，而 i 从 1 开始）
		const [start, _, value] = arr[i - 1]; // 解构出当前事件的开始时间、结束时间和价值（结束时间用 _ 忽略）

		// 使用二分查找，找到最后一个不与当前事件重叠的事件 p
		// p 是满足 arr[p].end <= start 的最大索引（即前 p 个事件可以和当前事件共存）
		let left = 0, right = i - 1; // 搜索范围是 [0, i-1]
		let p = 0; // 默认是 0（如果没有找到，说明当前事件不能和任何之前的事件共存）
		while (left <= right) {
			const mid = Math.floor((left + right) / 2); // 取中间点
			if (arr[mid][1] < start) {
				// 如果 中间点 的结束时间 < 当前事件的开始时间，说明不重叠
				p = mid + 1; // 更新 p 为 mid + 1（因为 mid 可能是最后一个不重叠的事件）
				left = mid + 1; // 继续向右搜索-> 右边的结束时间更大
			} else {
				// 如果 arr[mid] 的结束时间 >= 当前事件的开始时间，说明重叠
				right = mid - 1; // 继续向左搜索
			}
			// console.log(p,"<<<<<<<")
		}
		// 循环结束后，p 是最后一个不与当前事件重叠的事件索引 + 1

		// 更新 dp[i][j]（从前 i 个事件中选 j 个的最大价值）
		for (let j = 1; j <= k; j++) {
			// 两种情况：
			// 1. 不选当前事件：dp[i][j] = dp[i - 1][j]（直接继承前 i-1 个事件选 j 个的结果）
			// 2. 选当前事件：dp[i][j] = dp[p][j - 1] + value（前 p 个事件选 j-1 个，再加上当前事件的价值）
			dp[i][j] = Math.max(dp[i - 1][j], dp[p][j - 1] + value);
		}
		// console.log(dp)
	}

	return dp[n][k];
}


if (import.meta.vitest) {
	const { it, expect } = import.meta.vitest
	it('case1', () => {
		const events = [[1, 2, 4], [3, 4, 3], [2, 3, 1]];
		const k = 2
		expect(maxValue(events, k)).equal(7)
	})

	it('case2', () => {
		const events = [[1, 2, 4], [3, 4, 3], [2, 3, 10]];
		const k = 2
		expect(maxValue(events, k)).equal(10)
	})

	it('case3', () => {
		const events = [[1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4]];
		const k = 3
		expect(maxValue(events, k)).equal(9)
	})

	it('case4', () => {
		const events = [[69, 83, 61], [44, 90, 19], [26, 87, 9]]
		const k = 3
		expect(maxValue(events, k)).equal(61)
	})
	it("case5", () => {
		const events = [[13, 47, 98], [49, 74, 28], [46, 63, 74], [56, 71, 94], [12, 51, 21], [12, 58, 50], [27, 68, 97], [4, 12, 37], [13, 17, 17], [57, 59, 95], [45, 98, 53], [41, 52, 86], [40, 51, 94], [14, 44, 49], [10, 66, 91], [56, 63, 92], [30, 48, 74], [21, 80, 55], [16, 37, 43], [5, 69, 67], [81, 100, 87]]
		const k = 12
		expect(maxValue(events, k)).equal(356)
	})
	it('case6', () => {
		const events = [[74, 91, 40]]
		const k = 1
		expect(maxValue(events, k)).equal(40)
	})

	it('case7', () => {
		const events = [[9, 47, 98], [82, 92, 11], [19, 93, 58], [91, 94, 55], [49, 66, 90], [14, 22, 19], [5, 22, 81], [59, 69, 68], [57, 61, 47], [56, 73, 32], [33, 82, 35], [1, 74, 35], [51, 89, 73], [43, 90, 37], [16, 91, 21], [66, 100, 25], [21, 89, 100], [50, 85, 70], [17, 84, 24], [25, 79, 72], [10, 70, 96], [10, 40, 4], [11, 65, 59], [13, 87, 83], [1, 68, 36]]
		const k = 13
		expect(maxValue(events, k)).equal(243)
	})


	it('case8', () => {
		const events = [[13, 70, 78], [39, 79, 2], [21, 50, 66], [23, 87, 50], [23, 62, 5], [29, 41, 81], [32, 52, 69], [22, 25, 61], [86, 92, 59], [39, 50, 35], [43, 56, 27], [83, 90, 5], [87, 95, 74], [8, 100, 71], [25, 96, 5], [64, 68, 43], [33, 98, 100], [8, 99, 17], [7, 48, 91], [52, 94, 54], [32, 48, 45], [47, 57, 51], [4, 74, 50], [17, 95, 18], [53, 61, 33], [22, 99, 92]]
		const k = 24
		expect(maxValue(events, k)).equal(310)
	})

	it('case9', () => {
		const events = [[609160999, 612582699, 443422], [947166815, 953380719, 500128], [509665293, 518745581, 149858], [625034765, 625478636, 483866], [781784820, 782291828, 143346], [174077331, 177609753, 180156], [800863484, 802150672, 320499], [379280423, 386305516, 744771], [972166957, 973110948, 79556], [692103213, 692598640, 469358], [108578958, 116774463, 345270], [256592151, 260217350, 664230], [268985479, 286614436, 166394], [42376830, 44672481, 667237], [530474061, 531435025, 452033], [180856546, 188537226, 395742], [338388551, 342982219, 401949], [507351469, 507913727, 549999], [154302831, 156765309, 406069], [290607284, 300207459, 948892], [888281045, 892881727, 248408], [446315936, 447061616, 104646], [815494172, 825477446, 398940], [756050332, 776209136, 521588], [779316632, 779549080, 963107], [869704183, 872729766, 5720], [462503443, 469555485, 895241], [693441085, 694978338, 185090], [841934770, 868854132, 55140], [989043039, 989602115, 353190], [900176469, 902174676, 79381], [474974825, 479638162, 503580], [304661378, 309185429, 599881], [684127403, 687829874, 472919], [351618428, 354094470, 598001], [973498017, 974205681, 946253], [210602172, 217465066, 704733], [420357195, 433111080, 52113], [563437917, 575174843, 702873], [804172347, 805364877, 714162], [458919059, 462050133, 35108], [9000788, 13150406, 652181], [35828449, 39094628, 145541], [959143837, 968532446, 617744], [631923914, 640240749, 156275], [953553442, 954876995, 989019], [875555671, 887619098, 895006], [699569058, 703133773, 404319], [54860536, 59914250, 76485], [922504737, 924918759, 33579], [260430887, 260483505, 177717], [227082211, 227559556, 413159], [335782302, 336897527, 679183], [697081841, 697880997, 396999], [368668959, 371316049, 731831], [560095497, 560975547, 711041], [681339475, 684097936, 419920], [309355796, 314934275, 127300], [262996731, 267567670, 375651], [195847429, 195906540, 855488], [656383532, 680387682, 487017], [598421277, 607100426, 384007], [170054420, 173421313, 337141], [236881563, 238498845, 879035], [244664075, 250331115, 280780], [825480669, 829419535, 98586], [984255323, 986838580, 915106], [523252252, 523269720, 896046], [577361186, 579854206, 687101], [74202559, 74304669, 654998], [493376690, 501763167, 566016], [66486085, 68558701, 116854], [753219176, 755396614, 413036], [403217227, 412032555, 364961], [730136072, 739387262, 15180], [538674042, 546547794, 283571], [990161375, 994240716, 486296], [287295040, 290465999, 253402], [127475277, 131381124, 459808], [69961343, 70828607, 437234], [448033366, 450427314, 576909], [581073127, 583845957, 819991], [649107027, 653839062, 114275], [72670974, 72791272, 208621], [434126470, 435830132, 647362], [795717304, 799240429, 774654], [90483158, 96047309, 785088], [588970519, 595272687, 241911], [80939799, 81840097, 900259], [333231653, 334320961, 415819], [251486136, 251901288, 854597], [140956566, 152440434, 418734], [100247381, 105571047, 758200], [695750330, 696415680, 461183], [918078263, 918890629, 26172], [906947242, 912435095, 769132], [750796382, 751146332, 766352], [932653715, 943945433, 151639], [787417692, 790849298, 545930], [479778644, 481390273, 245309]]
		const k = 50
		expect(maxValue(events, k)).equal(34368847)
	})
}